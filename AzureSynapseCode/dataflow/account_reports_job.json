{
	"name": "account_reports_job",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourceData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getLookupData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output_ar",
						"type": "DatasetReference"
					},
					"name": "upsertTable"
				}
			],
			"transformations": [
				{
					"name": "CDC"
				},
				{
					"name": "sortedLookupData"
				},
				{
					"name": "selectNewData"
				},
				{
					"name": "upsertData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ACCTRPTS_DIM_UID as integer,",
				"          PRJCT_ID as string,",
				"          ACCTRPTS_REM_TXT as string,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          IS_DELETED as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     ACC.PROC_ID as ACCTRPTS_DIM_UID,\\n     ACC.PROJECT_ID as PRJCT_ID,\\n     cast(ACC.REMARKS as varchar(1024)) as ACCTRPTS_REM_TXT,\\n     ACC.CREATED_TS as SRC_CRETD_TMS,\\n     ACC.CREATED_USERID as SRC_CRETD_USER_ID,\\n     ACC.UPDATED_TS as SRC_UPDTD_TMS,\\n     ACC.UPDATED_USERID as SRC_UPDTD_USER_ID,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID,\\n     case when PDEL.PROC_ID is null then 0 else 1 end as IS_DELETED\\nfrom\\n     APPFUN.ACCTRPTS ACC\\n     inner join\\n     PGMPDM.ZAUX_DATE_TRIGGERS ZDT\\n     on ACC.PROC_ID = ZDT.PROC_ID\\n     left join\\n     PGMPDM.ZAUX_DELD_PROC_ID PDEL\\n     on ACC.PROC_ID = PDEL.PROC_ID\\n     left join\\n     (\\n          Select\\n               coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n          from\\n               PGMPDM.ZAUX_ETL_JOBS\\n          where\\n               ETL_JOB_NM = \\'BALD0010_ACCTRPTS_DIM\\'          \\n     ) as JOB\\n     on \\'1\\' = \\'1\\'\\n     left join\\n     (\\n          Select\\n               ETL_EXCTN_ID,\\n               ETL_PARAM_START_TMS,\\n               ETL_PARAM_END_TMS\\n          from\\n               PGMPDM.ZAUX_ETL_EXCTN\\n          where\\n               IS_CURR_IND = \\'Y\\'\\n     ) as FIL\\n     on \\'1\\' = \\'1\\'\\n     left join\\n     (\\n          Select\\n               coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n          from\\n               PGMPDM.SRC_SYS_DIM\\n          where\\n               SRC_SYS_CD = \\'PGMP\\'               \\n     ) as SYS\\n     on \\'1\\' = \\'1\\'\\n',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourceData",
				"source(output(",
				"          ACCTRPTS_DIM_UID as integer,",
				"          PRJCT_ID as string,",
				"          ACCTRPTS_REM_TXT as string,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          SRC_SYS_DIM_UID as integer,",
				"          ETL_JOB_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     S.ACCTRPTS_DIM_UID,\\n     S.PRJCT_ID,\\n     S.ACCTRPTS_REM_TXT,\\n     S.SRC_CRETD_TMS,\\n     S.SRC_CRETD_USER_ID,\\n     S.SRC_UPDTD_TMS,\\n     S.SRC_UPDTD_USER_ID,\\n     S.SRC_SYS_DIM_UID,\\n     S.ETL_JOB_ID\\nfrom\\n     PGMPDM.ACCTRPTS_DIM S\\n     inner join\\n     PGMPDM.ZAUX_DATE_TRIGGERS ZDT\\n     on S.ACCTRPTS_DIM_UID = ZDT.PROC_ID     \\n     ',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getLookupData",
				"getSourceData, sortedLookupData join(getSourceData@ACCTRPTS_DIM_UID == getLookupData@ACCTRPTS_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CDC",
				"getLookupData sort(asc(ACCTRPTS_DIM_UID, false)) ~> sortedLookupData",
				"CDC select(mapColumn(",
				"          ACCTRPTS_DIM_UID = getSourceData@ACCTRPTS_DIM_UID,",
				"          PRJCT_ID = getSourceData@PRJCT_ID,",
				"          ACCTRPTS_REM_TXT = getSourceData@ACCTRPTS_REM_TXT,",
				"          SRC_CRETD_TMS = getSourceData@SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID = getSourceData@SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS = getSourceData@SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID = getSourceData@SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID = getSourceData@ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID = getSourceData@SRC_SYS_DIM_UID,",
				"          IS_DELETED,",
				"          ACCTRPTS_DIM_UID = getLookupData@ACCTRPTS_DIM_UID,",
				"          PRJCT_ID = getLookupData@PRJCT_ID,",
				"          ACCTRPTS_REM_TXT = getLookupData@ACCTRPTS_REM_TXT,",
				"          SRC_CRETD_TMS = getLookupData@SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID = getLookupData@SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS = getLookupData@SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID = getLookupData@SRC_UPDTD_USER_ID,",
				"          SRC_SYS_DIM_UID = getLookupData@SRC_SYS_DIM_UID,",
				"          ETL_JOB_ID = getLookupData@ETL_JOB_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectNewData",
				"selectNewData alterRow(upsertIf(ACCTRPTS_DIM_UID!=toInteger(null()))) ~> upsertData",
				"upsertData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     partitionBy('hash', 1)) ~> upsertTable"
			]
		}
	}
}