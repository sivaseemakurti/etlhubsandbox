{
	"name": "DF_BALD1090_CNTRCT_DIM",
	"properties": {
		"folder": {
			"name": "PGMP"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourceData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getLookupData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "updateTable"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "insertTable"
				}
			],
			"transformations": [
				{
					"name": "sortedLookupData"
				},
				{
					"name": "updateRows"
				},
				{
					"name": "CDC"
				},
				{
					"name": "mergedData"
				},
				{
					"name": "selectInsertData"
				},
				{
					"name": "addColumns1"
				},
				{
					"name": "addColumns2"
				},
				{
					"name": "selectUpdateData"
				},
				{
					"name": "CDCval"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MAX_ID as integer,",
				"          ROW_NUM as long,",
				"          CNTRCT_ID as integer,",
				"          CLNT_DIM_UID as integer,",
				"          SO_NONSO_DIM_UID as integer,",
				"          CNTRCT_STATE_CD as string,",
				"          CNTCT_TXT as string,",
				"          CNTRCT_NUM as string,",
				"          CNTRCT_NM as string,",
				"          CNTRCT_ATTCHMT_LCTN_TXT as string,",
				"          START_DT as date,",
				"          END_DT as date,",
				"          LINE_OF_BUS_TYPE_CD as string,",
				"          INDSTRY_TXT as string,",
				"          INDSTRY_SRC_TXT as string,",
				"          VRFYD_DT as date,",
				"          INDSTRY_OVERRDEN_IND as string,",
				"          GEO_DIM_UID as integer,",
				"          SCTR_DIM_UID as integer,",
				"          CNTRCT_TYPE_DIM_UID as integer,",
				"          PRVT_IND as string,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          CLIENT_UNIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     (Select \\n          coalesce(max(CNTRCT_DIM_UID), 0) \\n      From PGMPDM.CNTRCT_DIM\\n     ) as MAX_ID,\\n     ROW_NUMBER() over (order by C.CNTRCT_ID) as ROW_NUM,\\n     C.CNTRCT_ID as CNTRCT_ID,\\n     C.CLIENT_ID as CLNT_DIM_UID, -- The CLIENT_ID is reused as CLNT_DIM_UID, not look up required\\n     SND.SO_NONSO_DIM_UID as SO_NONSO_DIM_UID,\\n     coalesce(C.STATUS, PC.STATUS) as CNTRCT_STATE_CD,\\n     coalesce(C.CNTCT, PC.CNTCT) as CNTCT_TXT,\\n     C.CNTRCT_NUMBER as CNTRCT_NUM,\\n     C.NAME as CNTRCT_NM,\\n     C.CNTRCT_ATTCHMNT_LOC as CNTRCT_ATTCHMT_LCTN_TXT,\\n     C.CNTRCT_START_DATE     as START_DT,\\n     C.CNTRCT_END_DATE as END_DT,\\n     PC.LINE_OF_BUSINESS_TYPE as LINE_OF_BUS_TYPE_CD,\\n     PC.INDUSTRY_TXT as INDSTRY_TXT,\\n     PC.INDUSTRY_SOURCE_TXT as INDSTRY_SRC_TXT,\\n     PC.VERIFIED_DATE as VRFYD_DT,\\n     PC.INDUSTRY_OVERRIDDEN_FLAG as INDSTRY_OVERRDEN_IND,\\n     G.GEO_DIM_UID as GEO_DIM_UID,\\n     coalesce(SD.SCTR_DIM_UID, -1) as SCTR_DIM_UID,\\n     coalesce(CT.CNTRCT_TYPE_DIM_UID, -1) as CNTRCT_TYPE_DIM_UID,\\n     case \\n          when PRIVATE_CONTRACTS.CNTRCT_ID is null then cast(\\'N\\' as char(1)) \\n          else cast(\\'Y\\' as char(1)) \\n     end as PRVT_IND,\\n     C.CREATED_TS as SRC_CRETD_TMS,\\n     C.CREATED_USERID as SRC_CRETD_USER_ID,\\n     C.UPDATED_TS as SRC_UPDTD_TMS,\\n     C.UPDATED_USERID as SRC_UPDTD_USER_ID,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID,\\n    C.CLIENT_UNIT as CLIENT_UNIT\\nFrom\\n     APPFUN.CNTRCT C\\n     left join\\n     APPFUN.PST_CNTRCT PC\\n     on C.CNTRCT_ID = PC.PST_CNTRCT_ID\\n     -- SO_NONSO_DIM_UID: Find out if the contract is defined as Non-SO\\n     left join\\n     APPFUN.NON_SO_CNTRCT_TMF SOTMF\\n     on C.CNTRCT_ID = SOTMF.CNTRCT_ID\\n     left join\\n     PGMPDM.SO_NONSO_DIM SND\\n     -- The case validates if the TMF record for the contract is null\\n     -- If the value is null, the contract is NOT considered Non-SO, which means \"SO\"\\n     -- Otherwise, if the contract id is found in the tmf table, \\n     -- it implies that the record should be treated as \"NON_SO\" \\n     on case when SOTMF.CNTRCT_ID is null then \\'SO\\' else \\'NON_SO\\' end = SND.SO_NONSO_CD\\n     -- GEO_DIM_UID: find out the corresponding GEO record\\n    left join\\n    APPFUN.ORG_CNTRCT_MAP OCM \\n    on C.CNTRCT_ID = OCM.CNTRCT_ID\\n    left join\\n    APPFUN.PST_ORG O \\n    on OCM.ORG_ID = O.PST_ORG_ID\\n    left join\\n    PGMPDM.GEO_DIM G\\n    on O.CNTRY = G.SRGN_CD     \\n    -- SCTR_DIM_UID: find out the corresponding sector\\n     left join\\n     PGMPDM.SCTR_DIM SD\\n     on PC.INDUSTRY_TXT = SD.ISU_INDSTRY_CD         \\n     -- CNTRCT_TYPE_DIM_UID: Logic to find out the corresponding contract type\\n     left join \\n     PGMPDM.CNTRCT_TYPE_DIM CT\\n     on \\n          case\\n            when O.TST_ACCNT_IND = \\'Y\\' AND C.CNTRCT_ID = 1203950002 then \\'Production Contract\\'  -- Jira PGMP-931\\n               when /*O.PST_ORG_STATUS = \\'O\\' and */ O.ORG_ACTV_FLAG = \\'N\\' then \\'Inactive Contract\\'   ---  795819\\n               when O.TST_ACCNT_IND =\\'Y\\' then \\'Test Contract\\'\\n            when O.TST_ACCNT_IND =\\'I\\' then \\'Inactive Contract\\'    ------ added as part of 553286\\n               when C.STATUS = \\'A\\' and lower(C.NAME) like \\'test%\\' then \\'Test Contract\\'          \\n               else \\'Production Contract\\'\\n        end = CT.CNTRCT_TYPE_DESC\\n     -- Determination of the private contracts    \\n    left join (\\n          Select \\n               OCM.CNTRCT_ID\\n          From \\n               (\\n                    Select\\n                         ORG_ID\\n                    From\\n                         APPFUN.ORG R\\n                    Where\\n                         R.PARENT_ORG_ID is null\\n                         and upper(R.TITLE) like \\'%PRIVATE%\\'                               \\n               ) R\\n               left join\\n               APPFUN.ORG C1\\n               on R.ORG_ID = C1.PARENT_ORG_ID\\n               left join\\n               APPFUN.ORG C2\\n               on C1.ORG_ID = C2.PARENT_ORG_ID\\n               left join\\n               APPFUN.ORG C3\\n               on C2.ORG_ID = C3.PARENT_ORG_ID\\n               left join\\n               APPFUN.ORG_CNTRCT_MAP OCM\\n               on \\n                    C1.ORG_ID = OCM.ORG_ID\\n                    or C2.ORG_ID = OCM.ORG_ID\\n                    or C3.ORG_ID = OCM.ORG_ID\\n          Where\\n               OCM.CNTRCT_ID is not null     \\n     ) PRIVATE_CONTRACTS\\n    on C.CNTRCT_ID = PRIVATE_CONTRACTS.CNTRCT_ID\\n     left join (\\n          Select\\n               coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n          From\\n               PGMPDM.ZAUX_ETL_JOBS\\n          Where\\n               ETL_JOB_NM = \\'BALD1090_CNTRCT_DIM\\'          \\n     ) JOB\\n     on 1 = 1\\n     left join (\\n          Select\\n               ETL_EXCTN_ID\\n          From\\n               PGMPDM.ZAUX_ETL_EXCTN\\n          Where\\n               IS_CURR_IND = \\'Y\\'\\n     ) FIL\\n     on 1 = 1\\n     left join (\\n          Select\\n               coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n          From\\n               PGMPDM.SRC_SYS_DIM\\n          Where\\n               SRC_SYS_CD = \\'PGMP\\'               \\n     ) SYS\\n     on 1 = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourceData",
				"source(output(",
				"          LKP_CNTRCT_ID as integer,",
				"          LKP_CLNT_DIM_UID as integer,",
				"          LKP_SO_NONSO_DIM_UID as integer,",
				"          LKP_CNTRCT_STATE_CD as string,",
				"          LKP_CNTCT_TXT as string,",
				"          LKP_CNTRCT_NUM as string,",
				"          LKP_CNTRCT_NM as string,",
				"          LKP_CNTRCT_ATTCHMT_LCTN_TXT as string,",
				"          LKP_START_DT as date,",
				"          LKP_END_DT as date,",
				"          LKP_LINE_OF_BUS_TYPE_CD as string,",
				"          LKP_INDSTRY_TXT as string,",
				"          LKP_INDSTRY_SRC_TXT as string,",
				"          LKP_VRFYD_DT as date,",
				"          LKP_INDSTRY_OVERRDEN_IND as string,",
				"          LKP_GEO_DIM_UID as integer,",
				"          LKP_SCTR_DIM_UID as integer,",
				"          LKP_CNTRCT_TYPE_DIM_UID as integer,",
				"          LKP_PRVT_IND as string,",
				"          LKP_SRC_CRETD_TMS as timestamp,",
				"          LKP_SRC_CRETD_USER_ID as string,",
				"          LKP_SRC_UPDTD_TMS as timestamp,",
				"          LKP_SRC_UPDTD_USER_ID as string,",
				"          LKP_ETL_JOB_ID as integer,",
				"          LKP_SRC_SYS_DIM_UID as integer,",
				"          LKP_CLIENT_UNIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     CNTRCT_ID as LKP_CNTRCT_ID,\\n     CLNT_DIM_UID as LKP_CLNT_DIM_UID,\\n     SO_NONSO_DIM_UID as LKP_SO_NONSO_DIM_UID,\\n     CNTRCT_STATE_CD as LKP_CNTRCT_STATE_CD,\\n     CNTCT_TXT as LKP_CNTCT_TXT,\\n     CNTRCT_NUM as LKP_CNTRCT_NUM,\\n     CNTRCT_NM as LKP_CNTRCT_NM,\\n     CNTRCT_ATTCHMT_LCTN_TXT as LKP_CNTRCT_ATTCHMT_LCTN_TXT,\\n     START_DT as LKP_START_DT,\\n     END_DT as LKP_END_DT,\\n     LINE_OF_BUS_TYPE_CD as LKP_LINE_OF_BUS_TYPE_CD,\\n     INDSTRY_TXT as LKP_INDSTRY_TXT,\\n     INDSTRY_SRC_TXT as LKP_INDSTRY_SRC_TXT,\\n     VRFYD_DT as LKP_VRFYD_DT,\\n     INDSTRY_OVERRDEN_IND as LKP_INDSTRY_OVERRDEN_IND,\\n     GEO_DIM_UID as LKP_GEO_DIM_UID,\\n     SCTR_DIM_UID as LKP_SCTR_DIM_UID,\\n     CNTRCT_TYPE_DIM_UID as LKP_CNTRCT_TYPE_DIM_UID,\\n     PRVT_IND as LKP_PRVT_IND,\\n     SRC_CRETD_TMS as LKP_SRC_CRETD_TMS,\\n     SRC_CRETD_USER_ID as LKP_SRC_CRETD_USER_ID,\\n     SRC_UPDTD_TMS as LKP_SRC_UPDTD_TMS,\\n     SRC_UPDTD_USER_ID as LKP_SRC_UPDTD_USER_ID,\\n     ETL_JOB_ID as LKP_ETL_JOB_ID,\\n     SRC_SYS_DIM_UID as LKP_SRC_SYS_DIM_UID,\\n    \\'\\' as LKP_CLIENT_UNIT -- CLIENT_UNIT as LKP_CLIENT_UNIT\\nFrom\\n     PGMPDM.CNTRCT_DIM',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getLookupData",
				"getLookupData sort(asc(LKP_CNTRCT_ID, false)) ~> sortedLookupData",
				"selectUpdateData alterRow(updateIf(true())) ~> updateRows",
				"CDCval split(ROW_STATUS!='I',",
				"     disjoint: false) ~> CDC@(dataToBeUpdated, dataToBeInserted)",
				"getSourceData, sortedLookupData join(CNTRCT_ID == LKP_CNTRCT_ID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> mergedData",
				"addColumns2 select(mapColumn(",
				"          CNTRCT_ID,",
				"          CLNT_DIM_UID,",
				"          SO_NONSO_DIM_UID,",
				"          CNTRCT_STATE_CD,",
				"          CNTCT_TXT,",
				"          CNTRCT_NUM,",
				"          CNTRCT_NM,",
				"          CNTRCT_ATTCHMT_LCTN_TXT,",
				"          START_DT,",
				"          END_DT,",
				"          LINE_OF_BUS_TYPE_CD,",
				"          INDSTRY_TXT,",
				"          INDSTRY_SRC_TXT,",
				"          VRFYD_DT,",
				"          INDSTRY_OVERRDEN_IND,",
				"          GEO_DIM_UID,",
				"          SCTR_DIM_UID,",
				"          CNTRCT_TYPE_DIM_UID,",
				"          PRVT_IND,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          CLIENT_UNIT,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_CRETD_TMS,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInsertData",
				"CDC@dataToBeUpdated derive(DM_CRETD_USER_ID = \"dsdam\",",
				"          DM_UPDTD_USER_ID = \"dsdam\",",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns1",
				"CDC@dataToBeInserted derive(CNTRCT_ID = MAX_ID+ROW_NUM,",
				"          DM_CRETD_USER_ID = \"dsdam\",",
				"          DM_CRETD_TMS = currentTimestamp(),",
				"          DM_UPDTD_USER_ID = \"dsdam\",",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns2",
				"addColumns1 select(mapColumn(",
				"          CNTRCT_ID,",
				"          CLNT_DIM_UID,",
				"          SO_NONSO_DIM_UID,",
				"          CNTRCT_STATE_CD,",
				"          CNTCT_TXT,",
				"          CNTRCT_NUM,",
				"          CNTRCT_NM,",
				"          CNTRCT_ATTCHMT_LCTN_TXT,",
				"          START_DT,",
				"          END_DT,",
				"          LINE_OF_BUS_TYPE_CD,",
				"          INDSTRY_TXT,",
				"          INDSTRY_SRC_TXT,",
				"          VRFYD_DT,",
				"          INDSTRY_OVERRDEN_IND,",
				"          GEO_DIM_UID,",
				"          SCTR_DIM_UID,",
				"          CNTRCT_TYPE_DIM_UID,",
				"          PRVT_IND,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          CLIENT_UNIT,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpdateData",
				"mergedData derive(ROW_STATUS = case(CNTRCT_ID == toInteger(null()) && LKP_CNTRCT_ID != toInteger(null()), 'D', case(CNTRCT_ID != toInteger(null()) && LKP_CNTRCT_ID == toInteger(null()), 'I', 'U'))) ~> CDCval",
				"updateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CNTRCT_DIM',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['CNTRCT_ID'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> updateTable",
				"selectInsertData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CNTRCT_DIM',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertTable"
			]
		}
	}
}