{
	"name": "xfrm_deltalake_scd_type2_with_parameters",
	"properties": {
		"folder": {
			"name": "Srilatha"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sPoolKyn001494",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "741bc7ae-a6b3-4c2f-9c88-e8060c51b585"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/eb01b8c2-e8d1-4c19-9788-5469f1f3fd10/resourceGroups/rg-kyn-001494-dev-eus-001/providers/Microsoft.Synapse/workspaces/asa-kyn-001494-dev-eus-001/bigDataPools/sPoolKyn001494",
				"name": "sPoolKyn001494",
				"type": "Spark",
				"endpoint": "https://asa-kyn-001494-dev-eus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sPoolKyn001494",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#import necessary python libraries\r\n",
					"\r\n",
					"from azure.storage.blob import BlobClient\r\n",
					"import pandas as pd\r\n",
					"from io import StringIO\r\n",
					"from pyspark.sql.functions import md5, concat_ws\r\n",
					"from sqlite3 import connect\r\n",
					"from pyspark.sql import functions as F\r\n",
					"#conn = connect(':memory:')\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession \r\n",
					"from pyspark.sql.types import * \r\n",
					"from delta.tables import *\r\n",
					"#import os\r\n",
					"import sys\r\n",
					"\r\n",
					"#Read data from adls csv file extracted from source at https://adls4fsoetlhubdevuseast.dfs.core.windows.net/deltalake/data/customer/\r\n",
					"\r\n",
					"account_name = 'adls4fsoetlhubdevuseast' # fill in your primary account name \r\n",
					"container_name = 'customer' # fill in your container name \r\n",
					"relative_path = '' # fill in your relative folder path \r\n",
					"\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path) \r\n",
					"print('Primary storage account path: ' + adls_path) \r\n",
					"\r\n",
					"# Read a csv file \r\n",
					"csv_path = adls_path + 'customer_data.csv' \r\n",
					"incrementalData_DF = spark.read.csv(csv_path, header = 'true')\r\n",
					"\r\n",
					"tablename=\"etlhubConfirmed.customer_dimension\"\r\n",
					"natural_key=\"CUSTOMER_NO\"\r\n",
					"keycolumn=\"CUSTOMER_KEY\"\r\n",
					"#columns1 = [\"FINANCIAL_COUNTRY_CD\",\"CUSTOMER_DESC\",\"GBG_ID\"]\r\n",
					"\r\n",
					"# Get column list for creating Rec_Checksum\r\n",
					"\r\n",
					"#Add checks for duplicate data, Check for 1. dups in source data based on natural Key and\r\n",
					"# 2. Dups in target already\r\n",
					"\r\n",
					"col_list=[]\r\n",
					"for i in incrementalData_DF.columns:\r\n",
					"    col_list.append(i)\r\n",
					"    #print (col_list)\r\n",
					"\r\n",
					"# Add a checsum column to help identify the changed rows\r\n",
					"\r\n",
					"incrementalData_DF1 = incrementalData_DF.withColumn(\"nk_hash\",md5(natural_key))\r\n",
					"incrementalData_DF2 = incrementalData_DF1.withColumn(\"column_hash\", md5(concat_ws(\"\", *col_list)))\r\n",
					"\r\n",
					"#sell_cyclecolhashDF.show()\r\n",
					"incrementalData_DF2.createOrReplaceTempView(\"incrementalData_DF2\")\r\n",
					"\r\n",
					"#Create a deltalake table with necessary columns\r\n",
					"\r\n",
					"#incrementalData_DF2.show()\r\n",
					"\r\n",
					"#existingDataDF=spark.sql(\"SELECT * from $table_name tgt WHERE CURRENT_IND='Y'\")\r\n",
					"existingDataDF=spark.sql(\"SELECT * FROM {}  WHERE CURRENT_IND='Y'\".format(tablename))\r\n",
					"#existingDF.createOrReplaceTempView('existingDF')\r\n",
					"#existingDataDF.show()\r\n",
					"\r\n",
					"existingMaxKeyDF=spark.sql(\"SELECT MAX({}) existing_MAX_KEY from {} WHERE CURRENT_IND='Y'\".format(keycolumn,tablename))\r\n",
					"#existingMaxKeyDF.show()\r\n",
					"\r\n",
					"# prefix all columns from target table with 'existing_'. This will help to differentiate columns when incremental and existing DF's are joined\r\n",
					"\r\n",
					"existingDataDF1 = existingDataDF.select([F.col(c).alias('existing_'+c) for c in existingDataDF.columns])\r\n",
					"#existingDataDF1.printSchema()\r\n",
					"\r\n",
					"existingDataDF1.createOrReplaceTempView('existingDataDF1')\r\n",
					"\r\n",
					"fullJoin1=incrementalData_DF2.join(existingDataDF1,incrementalData_DF2.CUSTOMER_NO == existingDataDF1.existing_CUSTOMER_NO, \"fullouter\") \r\n",
					"fullJoin2=fullJoin1.join(existingMaxKeyDF,None,\"CROSS\")\r\n",
					"\r\n",
					"fullJoin2.createOrReplaceTempView('fullJoin')\r\n",
					"#Insert for New rows which are missing in target and present in source based on Natural Key.\r\n",
					"\r\n",
					"qry= \"\"\"\r\n",
					"INSERT INTO etlhubConfirmed.customer_dimension \r\n",
					"select COALESCE(A.existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY 1) AS CUSTOMER_KEY,1 as VERSION , \r\n",
					"A.CUSTOMER_NO,A.FINANCIAL_COUNTRY_CD,A.GBG_ID,A.CUSTOMER_NAME,'Y' AS CURRENT_IND, CURRENT_TIMESTAMP AS EXTRACT_DT, \r\n",
					"CURRENT_TIMESTAMP AS REC_START_DT, '9999-12-31 00:00:00.000' as REC_END_DT, 'ESA' AS SOURCE_SYSTEM, A.column_hash as REC_CHECKSUM, \r\n",
					"'I' as REC_STATUS,current_timestamp as IMG_LST_UPD_DT, CURRENT_TIMESTAMP AS IMG_CREATED_DT, 'LG' AS DATA_IND, \r\n",
					"'Y' AS ACTIVE_IN_SOURCE_IND \r\n",
					"from fullJoin A \r\n",
					"LEFT JOIN etlhubConfirmed.customer_dimension B\r\n",
					"ON A.CUSTOMER_NO=B.CUSTOMER_NO\r\n",
					"AND CURRENT_IND='Y'\r\n",
					"WHERE existing_REC_CHECKSUM is null\r\n",
					"AND B.REC_CHECKSUM <> A.column_hash\r\n",
					";\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"qry1= \"\"\"\r\n",
					"select COALESCE(A.existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY 1) AS CUSTOMER_KEY,1 as VERSION , \r\n",
					"A.CUSTOMER_NO,A.FINANCIAL_COUNTRY_CD,A.GBG_ID,A.CUSTOMER_NAME,'Y' AS CURRENT_IND, CURRENT_TIMESTAMP AS EXTRACT_DT, \r\n",
					"CURRENT_TIMESTAMP AS REC_START_DT, '9999-12-31 00:00:00.000' as REC_END_DT, 'ESA' AS SOURCE_SYSTEM, A.column_hash as REC_CHECKSUM, \r\n",
					"'I' as REC_STATUS,current_timestamp as IMG_LST_UPD_DT, CURRENT_TIMESTAMP AS IMG_CREATED_DT, 'LG' AS DATA_IND, \r\n",
					"'Y' AS ACTIVE_IN_SOURCE_IND \r\n",
					"from fullJoin A \r\n",
					"LEFT JOIN etlhubConfirmed.customer_dimension B\r\n",
					"ON A.CUSTOMER_NO=B.CUSTOMER_NO\r\n",
					"AND CURRENT_IND='Y'\r\n",
					"WHERE existing_REC_CHECKSUM is null\r\n",
					"AND B.REC_CHECKSUM <> A.column_hash\r\n",
					";\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"qry3=\"\"\"\r\n",
					"SELECT COUNT(*) as CNT, CUSTOMER_NO FROM incrementalData_DF2 GROUP BY CUSTOMER_NO HAVING COUNT(*)>1\r\n",
					";\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"df3=spark.sql(qry3)\r\n",
					"cnt1=df3.count()\r\n",
					"\r\n",
					"print (cnt1)\r\n",
					"if cnt1 == 0:\r\n",
					"    print(\"No Duplicates in source data\")\r\n",
					"    status = 'success'\r\n",
					"else:\r\n",
					"    print(\"Below are the duplicates:\")\r\n",
					"    df3.show()\r\n",
					"    status = 'fail'\r\n",
					"    #os.abort() this will take the spark cluster also down\r\n",
					"    sys.exit(1)\r\n",
					"    print(\"This will not be printed\")\r\n",
					"print (\"this will not be printed either\")\r\n",
					"\r\n",
					"#Below code can be used to evaluate if the DMLs are successful or not Exception handling purpose\r\n",
					"#try:\r\n",
					"#  sqlContext.sql(\"create table {}.`{}` as select * from mytempTable\".format(hivedb,table))\r\n",
					"#except:\r\n",
					"#   status = 'fail'\r\n",
					"\r\n",
					"#assert status == 'success', 'status should be success'\r\n",
					"\r\n",
					"#a=spark.sql(qry)\r\n",
					"\r\n",
					"#print( df3. || ' Duplicate found ')\r\n",
					"\r\n",
					"#a.num_affected_rows\r\n",
					"#print(numOutputRows)\r\n",
					"\r\n",
					"\r\n",
					"#deltaTable1 = DeltaTable.forPath(spark, 'abfss://deltalake@adls4fsoetlhubdevuseast.dfs.core.windows.net/data/customer/customer_dimension2')\r\n",
					"\r\n",
					"#deltaTable = DeltaTable.forName(spark, 'etlhubConfirmed.customer_dimension')\r\n",
					"\r\n",
					"\r\n",
					"#fullHistoryDF = deltaTable.history()    # get the full history of the table\r\n",
					"\r\n",
					"#lastOperationDF = deltaTable.history(1) # get the last operation\r\n",
					"\r\n",
					"#print(lastOperationDF.operationMetrics)\r\n",
					"\r\n",
					"#lastOperationDF.show()\r\n",
					"\r\n",
					"#fullHistoryDF.show()\r\n",
					"\r\n",
					"#print(num_affected_rows)\r\n",
					"\r\n",
					"#print(num_inserted_rows)\r\n",
					""
				],
				"attachments": null,
				"execution_count": 7
			}
		]
	}
}