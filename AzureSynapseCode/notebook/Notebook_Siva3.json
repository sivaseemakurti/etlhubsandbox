{
	"name": "Notebook_Siva3",
	"properties": {
		"folder": {
			"name": "Siva"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sPoolKyn001494",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "390349d1-5b8a-47c2-90a4-36249c09414a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/eb01b8c2-e8d1-4c19-9788-5469f1f3fd10/resourceGroups/rg-kyn-001494-dev-eus-001/providers/Microsoft.Synapse/workspaces/asa-kyn-001494-dev-eus-001/bigDataPools/sPoolKyn001494",
				"name": "sPoolKyn001494",
				"type": "Spark",
				"endpoint": "https://asa-kyn-001494-dev-eus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sPoolKyn001494",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Try Delta Lake"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"mssparkutils.fs.mount(\n",
					"    \"abfss://customer@adls4fsoetlhubdevuseast.dfs.core.windows.net\",\n",
					"    \"/etlhubadls6\",\n",
					"    {\"linkedService\":\"ls_adls_project_dimension\"}\n",
					")"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jobId=mssparkutils.env.getJobId()\n",
					"print(jobId)\n",
					"df=spark.read.load('synfs:/' + jobId + '/etlhubadls6/customer_data.csv',format='csv',header=True)\n",
					"df.show()"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define column headers\n",
					"columns = [\"Employee\",\"Salary\"]\n",
					"\n",
					"# Define data for original dataframe\n",
					"empOriginal = [(\"Employee_1\",50000),(\"Employee_2\",55000)]\n",
					"\n",
					"# Define data for updates dataframe\n",
					"empUpdates = [(\"Employee_1\",50000),(\"Employee_2\",60000),(\"Employee_3\",55000)]\n",
					"\n",
					"# Create dataframe with orignial employee data\n",
					"dfOriginal = spark.createDataFrame(data = empOriginal,schema = columns)\n",
					"\n",
					"# Create dataframe with updated employee data\n",
					"dfUpdates = spark.createDataFrame(data = empUpdates,schema = columns)\n",
					"\n",
					"# Display dfOriginal\n",
					"dfOriginal.show()\n",
					"\n",
					"# Display dfUpdates\n",
					"dfUpdates.show()"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create temp views of both the dfOriginal and dfUpdates dataframes \n",
					"# so that we can easily query them with Spark SQL later\n",
					"\n",
					"#dfOriginal\n",
					"dfOriginal.createOrReplaceTempView('Employee_Original')\n",
					"\n",
					"#dfUpdates\n",
					"dfUpdates.createOrReplaceTempView('Employee_Updates')"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Create Delta Lake table, define schema and location\n",
					"CREATE TABLE DELTA_Employees (\n",
					"  Employee STRING NOT NULL,\n",
					"  Salary INT NOT NULL,\n",
					"  BeginDate DATE NOT NULL,\n",
					"  EndDate DATE NOT NULL,\n",
					"  CurrentRecord INT NOT NULL \n",
					")\n",
					"USING DELTA\n",
					"-- specify data lake folder location\n",
					"LOCATION 'abfss://deltalake@adls4fsoetlhubdevuseast.dfs.core.windows.net/dl1'"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"df = spark.sql(\"SELECT * FROM nyctaxi.passengercountstats\")\n",
					"df = df.repartition(1) # This ensures we'll get a single file during write()\n",
					"df.write.mode(\"overwrite\").csv(\"/NYCTaxi/PassengerCountStats_csvformat\")\n",
					"df.write.mode(\"overwrite\").parquet(\"/NYCTaxi/PassengerCountStats_parquetformat\")"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"CREATE TABLE IF NOT EXISTS default.people10m (\n",
					"  id INT,\n",
					"  firstName STRING,\n",
					"  middleName STRING,\n",
					"  lastName STRING,\n",
					"  gender STRING,\n",
					"  birthDate TIMESTAMP,\n",
					"  ssn STRING,\n",
					"  salary INT\n",
					") USING DELTA"
				],
				"attachments": null,
				"execution_count": 1
			}
		]
	}
}