{
	"name": "Notebook 5",
	"properties": {
		"folder": {
			"name": "Srilatha"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "479488f5-cd51-442a-8e69-ac01e706e0c4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.blob import BlobClient\r\n",
					"import pandas as pd\r\n",
					"from io import StringIO\r\n",
					"from pyspark.sql.functions import md5, concat_ws\r\n",
					"from sqlite3 import connect\r\n",
					"from pyspark.sql import functions as F\r\n",
					"conn = connect(':memory:')\r\n",
					"natural_key=\"CUSTOMER_NO\"\r\n",
					"columns = [\"FINANCIAL_COUNTRY_CD\",\"CUSTOMER_DESC\",\"GBG_ID\"]\r\n",
					"sas_url = \"https://adls4fsoetlhubdevuseast.blob.core.windows.net/customer/customer_data.csv?sv=2020-10-02&st=2022-05-15T14%3A59%3A08Z&se=2023-05-16T14%3A59%3A00Z&sr=b&sp=r&sig=RYE103C28iVzI4%2BTmiDyMqJhGGNqBooxZgUc4LITF4U%3D\"\r\n",
					"blob_client = BlobClient.from_blob_url(sas_url)\r\n",
					"blob_data = blob_client.download_blob()\r\n",
					"incrementalData = pd.read_csv(StringIO(blob_data.content_as_text()))\r\n",
					"#print(df)\r\n",
					"incrementalData_DF=spark.createDataFrame(incrementalData)\r\n",
					"col_list=[]\r\n",
					"for i in incrementalData_DF.columns:\r\n",
					"    col_list.append(i)\r\n",
					"    #print (col_list)\r\n",
					"incrementalData_DF1 = incrementalData_DF.withColumn(\"nk_hash\",md5(natural_key))\r\n",
					"incrementalData_DF2 = incrementalData_DF1.withColumn(\"column_hash\", md5(concat_ws(\"\", *col_list)))\r\n",
					"#sell_cyclecolhashDF.show()\r\n",
					"incrementalData_DF2.createOrReplaceTempView(\"incrementalData_DF2\")\r\n",
					"\r\n",
					"#jdbc:sqlserver://asa-kyn-001494-dev-eus-001.sql.azuresynapse.net:1433;database=dsqlpoolKyn001494DevEtlHubEUS001;user=undefined@asa-kyn-001494-dev-eus-001;password={your_password_here};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=30;\r\n",
					"existingDataDF = spark.read.format(\"jdbc\") \\\r\n",
					"    .option(\"url\", f\"jdbc:sqlserver://asa-kyn-001494-dev-eus-001.sql.azuresynapse.net:1433;databaseName=dsqlpoolKyn001494DevEtlHubEUS001;\") \\\r\n",
					"    .option(\"query\", \"SELECT MAX(CUSTOMER_KEY) OVER (ORDER BY CUSTOMER_KEY  ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS MAX_KEY, LOWER(CONVERT(VARCHAR(32),HashBytes('MD5', CUSTOMER_NO),2)) as existing_nk_hash,tgt.* FROM DBXDH.DHT_CUSTOMER as tgt WHERE CURRENT_IND='Y'\") \\\r\n",
					"    .option(\"user\", \"sqladminuser\") \\\r\n",
					"    .option(\"password\", \"try2find$5\") \\\r\n",
					"    .option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\") \\\r\n",
					"    .load()\r\n",
					"#existingDataDF1 = existingDataDF.select([F.col(c).alias(\"`\"'existing_'+c+\"`\") for c in existingDataDF.columns])\r\n",
					"existingDataDF1 = existingDataDF.select([F.col(c).alias('existing_'+c) for c in existingDataDF.columns])\r\n",
					"#existingDataDF1.printSchema()\r\n",
					"existingDataDF1.createOrReplaceTempView('existingDataDF')\r\n",
					"\r\n",
					"fullJoin1=incrementalData_DF2.join(existingDataDF1,incrementalData_DF2.CUSTOMER_NO == existingDataDF1.existing_CUSTOMER_KEY, \"fullouter\") \r\n",
					"fullJoin1.createOrReplaceTempView('fullJoin')\r\n",
					"\r\n",
					"#Insert for New rows\r\n",
					"\r\n",
					"fullJoin2=sqlContext.sql(\"select COALESCE(existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY 1) AS CUSTOMER_KEY,1 as VERSION , \\\r\n",
					"CUSTOMER_NO,FINANCIAL_COUNTRY_CD,GBG_ID,CUSTOMER_NAME,'Y' AS CURRENT_IND, CURRENT_TIMESTAMP AS EXTRACT_DT, \\\r\n",
					"CURRENT_TIMESTAMP AS REC_START_DT, '9999-12-31 00:00:00.000' as REC_END_DT, 'ESA' AS SOURCE_SYSTEM, column_hash as REC_CHECKSUM, \\\r\n",
					"'I' as REC_STATUS,current_timestamp as IMG_LST_UPD_DT, CURRENT_TIMESTAMP AS IMG_CREATED_DT, 'LG' AS DATA_IND, \\\r\n",
					"'Y' AS ACTIVE_IN_SOURCE_IND \\\r\n",
					"from fullJoin A WHERE existing_existing_nk_hash is null\")\r\n",
					"fullJoin2.createOrReplaceTempView('fullJoin2')\r\n",
					"\r\n",
					"#insert new rows into database\r\n",
					"\r\n",
					"fullJoin2.write \\\r\n",
					"        .format(\"jdbc\") \\\r\n",
					"        .option(\"url\", f\"jdbc:sqlserver://asa-kyn-001494-dev-eus-001.sql.azuresynapse.net:1433;databaseName=dsqlpoolKyn001494DevEtlHubEUS001;\") \\\r\n",
					"        .option(\"user\", \"sqladminuser\") \\\r\n",
					"        .option(\"password\", \"try2find$5\") \\\r\n",
					"        .option(\"dbtable\", \"DBXDH.DHT_CUSTOMER\") \\\r\n",
					"        .option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\") \\\r\n",
					"        .option(\"forwardSparkAzureStorageCredentials\", \"true\") \\\r\n",
					"        .mode(\"append\") \\\r\n",
					"        .save()\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}